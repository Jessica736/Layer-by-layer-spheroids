
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
library(dittoSeq)
library(RColorBrewer)

#Use D-score to assign SBO
#Cells were sequenced across two channels so need to combine data
setwd("/Users/jessicaking/Documents/PhD/Spheroid-scRNAseq")
source("DScore.R")

channel1<-dscore(
  path="/Users/jessicaking/Documents/PhD/Spheroid-scRNAseq/cellranger/3-1-GEX/filtered_feature_bc_matrix", 
  # List of features to include
  features=c("SBO03", "SBO04", "SBO05", "SBO06", "SBO07", "SBO08"),
  # Name of the assignment category csv output file
  cat.filename="channel1-Category-Cellhashing-Dscore.csv"
)

channel2<-dscore(
  path="/Users/jessicaking/Documents/PhD/Spheroid-scRNAseq/cellranger/3-2-GEX/filtered_feature_bc_matrix", 
  # List of features to include
  features=c("SBO03", "SBO04", "SBO05", "SBO06", "SBO07", "SBO08"),
  # Name of the assignment category csv output file
  cat.filename="channel2-Category-Cellhashing-Dscore.csv"
)

seurat_combined <- merge(channel1, y=c(channel2))

seurat_combined[["percent.mt"]] <- PercentageFeatureSet(seurat_combined, pattern = "^MT-")
VlnPlot(seurat_combined, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(seurat_combined, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(seurat_combined, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
seurat_combined <- subset(seurat_combined, subset = nFeature_RNA > 200 & nFeature_RNA < 95000 & percent.mt < 15)  
print(seurat_combined) #11471 cells

#add sample names
samples <- c(SBO03 = "drug-core", SBO04 = "control-core", SBO05 = "drug-middle", 
             SBO06 = "control-middle", SBO07 = "drug-periphery", SBO08 = "control-periphery")
names <- as.character(samples[seurat_combined$dscore])
seurat_combined <- AddMetaData(seurat_combined, metadata = names, col.name = 'Sample')

####Subset
drug1 <- subset(x = seurat_combined, subset = Sample == c('drug-core'))
drug2 <- subset(x = seurat_combined, subset = Sample == c('drug-middle'))
drug3 <- subset(x = seurat_combined, subset = Sample == c('drug-periphery'))
control4 <- subset(x = seurat_combined, subset = Sample == c('control-core'))
control5 <- subset(x = seurat_combined, subset = Sample == c('control-middle'))
control6<- subset(x = seurat_combined, subset = Sample == c('control-periphery'))

ALL <- merge(drug4, y=c(drug5, drug6)) #only looking at control spheroids for now

#Pre-processing
normdata <- NormalizeData(ALL, normalization.method = "LogNormalize", scale.factor = 10000)
normdata <- FindVariableFeatures(normdata, selection.method = "vst", nfeatures = 3000)
top10 <- head(VariableFeatures(normdata), 10)
plot1 <- VariableFeaturePlot(normdata)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
all.genes <- rownames(normdata)
scaled_data <- ScaleData(normdata) 
dim_red <- RunPCA(scaled_data, features = VariableFeatures(object = scaled_data))
print(dim_red[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(dim_red, dims = 1:2, reduction = "pca")
DimPlot(dim_red, reduction = "pca")
DimHeatmap(dim_red, dims = 1:20, cells = 500, balanced = TRUE)
ElbowPlot(dim_red)
SCdata <- FindNeighbors(dim_red, dims = 1:20)
SCdata <- FindClusters(SCdata, resolution = 0.4)
SCdata <- RunUMAP(SCdata, dims = 1:20)

DimPlot(SCdata, reduction = "umap", group.by = "Sample", pt.size = 0.5, label = F, 
        cols = c("#B14380", "#005685","grey88")) + 
  theme(text = element_text(size = 12)) 

########################################Finding differentially expressed genes################################################################################
SCdata  <- SetIdent(SCdata, value = SCdata$Sample)
all.markers_markers <- FindAllMarkers(SCdata, min.pct = 0.25, 
                                      logfc.threshold = 0.25, return.thresh = 0.05)

Avg_exp <- AverageExpression(SCdata, assays = "RNA",return.seurat = TRUE, group.by = "Sample", slot = "data")
cols2 <- c("#053061", "#2166AC", "#4393C3", "#92C5DE", "#D1E5F0", "#FDDBC7", "#F4A582", "#D6604D", "#B2182B", "#67001F")
DoHeatmap(Avg_exp, features = all.markers_markers$gene,  label = F, 
          group.bar = TRUE, draw.lines = TRUE, size = 3, angle = 30) + 
  scale_fill_gradientn(colors = cols2) + guides(colour = F)

########################################Pathway analysis################################################################################
library(clusterProfiler)
library(org.Hs.eg.db)
library(AnnotationHub)
library(AnnotationDbi)

dfsample <- split(all.markers_markers$gene,all.markers_markers$cluster)
length(dfsample)
head(dfsample)

dfsample$`control-core` = bitr(dfsample$`control-core`, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
dfsample$`control-middle` = bitr(dfsample$`control-middle`, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
dfsample$`control-periphery` = bitr(dfsample$`control-periphery`, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")

genelist <- list("control-core" = dfsample$`control-core`$ENTREZID,
                 "control-middle" = dfsample$`control-middle`$ENTREZID,
                 "control-periphery" = dfsample$`control-periphery`$ENTREZID)

require(ReactomePA)
test_comparison <- compareCluster(genelist, fun = "enrichPathway")
dotplot(test_comparison, x = "Cluster", color = "p.adjust", showCategory = 10, 
        by = "geneRatio",
        size = "Count",
        split = NULL,
        includeAll = TRUE,
        font.size = 10,
        title = "",
        label_format = 50,
        group = FALSE,
        shape = FALSE)

GOclusterplot <- compareCluster(geneCluster = genelist, fun = "enrichGO", OrgDb = "org.Hs.eg.db")
dotplot(GOclusterplot, x = "Cluster", color = "p.adjust", showCategory = 10, 
        by = "geneRatio",
        size = "Count",
        split = NULL,
        includeAll = TRUE,
        font.size = 10,
        title = "",
        label_format = 50,
        group = FALSE,
        shape = FALSE) 











